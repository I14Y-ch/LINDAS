name: Clear Stardog Graph Only

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  STARDOG_URL: 'https://stardog-test.cluster.ldbar.ch/lindas'
  TARGET_GRAPH: 'https://lindas.admin.ch/fso/i14y'

jobs:
  clear-graph:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Clear Stardog Graph
      env:
        STARDOG_USER: ${{ secrets.STARDOG_USER }}
        STARDOG_PASSWORD: ${{ secrets.STARDOG_PASSWORD_TEST }}
      run: |
        echo "Clearing Stardog graph..."
        python -c "
        import requests, time
        from requests.auth import HTTPBasicAuth
        
        def clear_with_retry(max_attempts=3):
            auth = HTTPBasicAuth('$STARDOG_USER', '$STARDOG_PASSWORD')
            
            for attempt in range(max_attempts):
                try:
                    print(f'Clear attempt {attempt + 1}/{max_attempts}')
                    response = requests.post(
                        '$STARDOG_URL/update',
                        headers={'Content-Type': 'application/sparql-update'},
                        auth=auth,
                        data='CLEAR GRAPH <$TARGET_GRAPH>',
                        verify=False,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        print('Graph cleared successfully')
                        return True
                    else:
                        print(f'Clear failed: HTTP {response.status_code}')
                        print(f'Response: {response.text[:200]}')
                        if attempt < max_attempts - 1:
                            time.sleep(10)
                        
                except Exception as e:
                    print(f'Clear attempt {attempt + 1} failed: {e}')
                    if attempt < max_attempts - 1:
                        time.sleep(10)
            
            return False
        
        success = clear_with_retry()
        if not success:
            print('Error: Could not clear graph after all attempts')
            exit(1)
        else:
            print('SUCCESS: Graph cleared!')
        "

    - name: Verify Graph is Empty
      env:
        STARDOG_USER: ${{ secrets.STARDOG_USER }}
        STARDOG_PASSWORD: ${{ secrets.STARDOG_PASSWORD_TEST }}
      run: |
        echo "Verifying graph is empty..."
        python -c "
        import requests
        from requests.auth import HTTPBasicAuth
        
        try:
            auth = HTTPBasicAuth('$STARDOG_USER', '$STARDOG_PASSWORD')
            
            count_query = 'SELECT (COUNT(*) as ?count) WHERE { GRAPH <$TARGET_GRAPH> { ?s ?p ?o } }'
            
            response = requests.post(
                '$STARDOG_URL/query',
                headers={
                    'Content-Type': 'application/sparql-query',
                    'Accept': 'application/sparql-results+json'
                },
                auth=auth,
                data=count_query,
                verify=False,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('results', {}).get('bindings'):
                    count = result['results']['bindings'][0]['count']['value']
                    if count == '0':
                        print(f'SUCCESS: Graph is empty (0 triples)')
                    else:
                        print(f'WARNING: Graph still contains {count} triples')
                else:
                    print('Graph appears to be empty')
            else:
                print(f'Could not verify: HTTP {response.status_code}')
                
        except Exception as e:
            print(f'Verification error: {e}')
        "
